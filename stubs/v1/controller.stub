<?php

namespace App\Http\Controllers;

use App\Models\{{modelName}};
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class {{controllerName}} extends Controller
{
    private function {{smallModelName}}(Request $request, {{modelName}} ${{smallModelName}})
    {
        ${{smallModelName}}->icon = $request->icon;
        ${{smallModelName}}->title = $request->title;
        ${{smallModelName}}->body = $request->body;

        $this->attachThumbnail($request, ${{smallModelName}}, '{{smallModelName}}', 600,400);

        if (${{smallModelName}}->save())
        {
            return redirect()
                ->back()
                ->with(['{{smallModelName}}-message'=>'About, successfully saved', 'type'=>'success']);
        }
        else
        {
            return redirect()
                ->back()
                ->with(['{{smallModelName}}-message'=>'About, was not save', 'type'=>'warning']);
        }
    }
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), $this->rules($request));

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        ${{smallModelName}} = new {{modelName}}();

        return $this->{{smallModelName}}($request, ${{smallModelName}});
    }

    /**
     * Display the specified resource.
     */
    public function show(Request $request, {{modelName}} ${{smallModelName}})
    {
        if($request->has('format'))
        {
            return json_encode(['title' => ${{smallModelName}}->title]);
        }
        else
        {
            return view('abouts.show', compact('${{smallModelName}}'));
        }
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{modelName}} ${{smallModelName}})
    {
        return view('{{smallModelName}}s.edit', compact('{{smallModelName}}'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, {{modelName}} ${{smallModelName}})
    {
        $validator = Validator::make($request->all(), $this->rules($request));

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        return $this->{{smallModelName}}($request, ${{smallModelName}});
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{modelName}} ${{smallModelName}})
    {
        $title = ${{smallModelName}}->title;

        if(${{smallModelName}}->delete())
        {
            return redirect('/{{smallModelName}}s')
                ->with(['{{smallModelName}}-message'=>'Successfully deleted '.$title,'type'=>'success']);
        }
        return redirect('/{{smallModelName}}s')
            ->with(['{{smallModelName}}-message'=>'Failed to delete '.$title, 'type'=>'danger']);
    }
}
